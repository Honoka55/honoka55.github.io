[{"content":"この記事では、MASM32 SDKのコンパイラとリンカを使ってアセンブリ言語をコンパイルする方法について説明します。単一ファイルの場合に適用されます。\n環境の用意 この記事で紹介する方法は、以下の環境でのみテストされています。\nWindows 11 22H2、MASM32 SDK version 11、GNU Make 3.81\n設定手順 MakeとMASM32のバイナリディレクトリを両方システム環境変数Pathに追加します。例えば、D:\\GnuWin32\\bin;D:\\masm32\\bin;のようなものです。 アセンブリソースファイルがあるディレクトリにmakefileというファイルを作成し、下記のコードを追加します。 makeを実行すると、プログラムが自動的にコンパイルされ、実行されます。 コンパイルをやり直したい場合は、make cleanを実行してから再度makeを実行してください。 メイクファイルのソースコード 以下のメイクファイルは、MASM32のディレクトリをD:\\masm32、コンパイルしたいファイル名をtest.asmと仮定し、D:\\irvineにあるライブラリファイル[1]をも参照しています。必要に応じて自由に変更することができます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # コンパイラとリンカの定義 CC = ml LD = link # コンパイラとリンカのオプションの定義 CFLAGS = /c /coff /ID:/masm32/include /ID:/Irvine LDFLAGS = /subsystem:CONSOLE /out:test.exe /LIBPATH:D:/masm32/lib /LIBPATH:D:/Irvine # ソースファイル、オブジェクトファイル、実行ファイルの定義 SRC = test.asm OBJ = test.obj EXE = test.exe # デフォルトターゲットの定義、実行ファイルを指定 all: $(EXE) # ソースファイルからオブジェクトファイルを生成するルールの定義 $(OBJ): $(SRC) $(CC) $(CFLAGS) $\u0026lt; # オブジェクトファイルから実行ファイルを生成し実行するルールの定義 $(EXE): $(OBJ) $(LD) $(LDFLAGS) $\u0026lt; ./$@ # クリーンアップターゲットの定義、オブジェクトファイルと実行ファイルを削除 clean: del $(OBJ) $(EXE) メイクファイルではタブ文字でインデントする必要があります。スペースでインデントするとエラーが発生しますので、注意してください。\n実行結果 例として、ターミナルにHello, World!を出力するための簡単な80386アセンブリプログラムを使用します。makeコマンドで一発コンパイルと実行すると、以下のように出力されます。\n註釈 ↑Kip R. Irvine氏が初心者向けに自ら設計した便利なライブラリです。これらのライブラリを使用しない場合は、6行目の /ID:/irvineと7行目の /LIBPATH:D:/Irvineを削除してください。 ","date":"2023-03-13T00:00:00Z","image":"https://s1.ax1x.com/2023/03/13/ppMLlhF.png","permalink":"https://honoka55.github.io/ja/p/masm32-assembly-make/","title":"Windowsでアセンブリを一発コンパイル・実行するメイクファイル"},{"content":"みなさん、こんにちは。私はゲーム・2048iángの開発者です。この間、2048iángが急に日本でも話題になり、多くの方々がプレイしてくださり、SNS上で自分がクリアしたスクリーンショットをシェアしてくださり、長い攻略記事を書いてくださったことに気づき、ゲーム開発者として非常に嬉しく思っており、同時に誠にありがとうございました。\nこのゲームのリリースには、Gabriele Cirulli氏がオープンソースとして公開している2048のソースコード、LINE社が公開しているLINE Seed JPフォント、そしてChatGPTの助けがあったことが欠かせませんでした。また、私とChatGPTのチャットログは中国語でしたため、開発プロセスが記された記事も中国語のみで書いていました。それを読んでくださった方々がいらっしゃることに気づき、感謝しております。先に言及された攻略記事は私にも拝読いたしました。ソースコード内の確率を参考にして書かれたとのことで、非常に詳しくて、「赤マス」などの便利な用語も使っている上に（私自身は「赤マス」を「幺言幺長馬長」と6文字で呼ぶ）、私自身にも達成できなかった高いスコアにまで達していることがわかりました。本当にこの素晴らしい成果に感謝申し上げます。もしもバグや改善の提案があれば、いつでもお知らせいただけると助かります。\n私自身には漢字に関するゲームに深い興味を持っていますので、皆さんからこういうゲームの遊び方にまつわるアイデアをお聞きできると嬉しいです。アイデアをお持ちであれば、ぜひコメント欄で教えてください。中国のプレイヤーからは、「𱟛」（レン・こい）の字を作る2048の制作を期待する声があがっていますが、日本でも同様の興味がある方がいらっしゃるかどうかはわかりません。もし新しい漢字ゲームを制作すれば、皆さんのアイデアを参考にしたいと思っています。\n最後に、このような記事を書く機会を与えてくださり、再び日本のプレイヤーの方々に心から感謝しております。ありがとうございました。もしこのゲームを気に入ってくださったら、サポートとして投げ銭いただけますと幸いです。\n","date":"2023-02-24T00:00:00Z","permalink":"https://honoka55.github.io/ja/p/2048iang-kansha/","title":"「2048iáng」の日本プレイヤーに感謝と色々"},{"content":"問題文 あるウェブサイトの不正利用フィルターは、以下の正規表現を使用して、あるフォントの作成必要がある文字を一致させます。\n1 2 3 (action == \u0026#34;edit\u0026#34;) \u0026amp; (added_lines rlike \u0026#34;[龦-鿼䶶-䶿𠀀-𱍊]\u0026#34;) 上記のフィルターは、CJK統合漢字のURO追加部分（初期の一部）、拡張A追加部分および拡張BからGまでのすべての文字（もちろん、空のコード位置および互換漢字補助を含む）の編集に一致します。頻度の高い文字については、フォントに既に含まれている場合でも、編集時にフィルターがトリガーされるため、フォントを作成する際に参考として使用するのは不便です。したがって、この正規表現を修正して、Unicodeの新しい漢字に一致しますが、既に含まれている部分を省いて、重複トリガーを回避します。フォントが更新されるたびに、このフィルターの正規表現も更新し、更新で追加済みの部分を除外する必要があります。\n入力形式 1行に2つの正規表現文字列$a,b$が含まれており、それぞれに一致する文字の集合が$A,B$とします。\n出力形式 最も短い$A \\setminus B$に一致できる正規表現を出力せよ。また、-[]以外の文字はUnicodeコードポイントの昇順に並べること。\n入出力の例 入力例1\n1 [𰀀-𱍊] [𰻞] 出力例1\n1 [𰀀-𰻝𰻟-𱍊] 入力例2\n1 [龦-鿿] [龲龵鿏鿔鿭鿬鿫] 出力例2\n1 [龦-龱龳龴龶-鿎鿐-鿓鿕-鿪鿮-鿿] 説明・ヒント $a$と$b$はどちらも、[で始まり]で終わる文字列で、その間にはCJK統合漢字または-しか含まれません。 $B \\subset A$を満たし、かつ、$A$の要素数は$3 \\times 10^5$以下とします。 abcのように3つの連続したコード位置に一致する場合は、[abc]ではなく[a-c]を使用してください。 原文： $B \\subseteq A$，且$\\mathrm{card}(A) \u0026lt; 3 \\times 10^5$。\n不算罕见的翻译：$B \\subseteq A$、かつ$\\mathrm{card}(A) \u0026lt; 3 \\times 10^5$を満たす。\n罕见：$B \\subset A$を満たし、かつ、$A$の要素数は$3 \\times 10^5$以下とします。\n","date":"2023-02-15T00:00:00Z","permalink":"https://honoka55.github.io/ja/p/abuse-regex/","title":"不正利用フィルター用の正規表現"},{"content":"PHPに付属していないマルチバイト関数をいくつか追加しています。\nPHPにデフォルトで付属しているmbstring拡張モジュールは、UTF-8でエンコードされたコンテンツを扱うためにmb_で始まるいくつかのマルチバイト関数を備えています。\n例えばUTF-8エンコーディングでは、どちらも文字列の長さを返す関数が、strlen(\u0026quot;焔華Honoka55\u0026quot;)は14（BMP漢字1文字は3バイト）、mb_strlen(\u0026quot;焔華Honoka55\u0026quot;)は10（1漢字は1文字と数える）を返します。\nしかし、mbstring拡張に備えている関数はそれほど豊富ではありません。以下は、筆者が学校のデータベースコース設計で使用しているいくつかの追加関数です。\nmb_substr_replace mbstring拡張にはmb_substrという関数がありますが、substr_replace関数の「mb版」は存在しません。\n関数substr_replaceは文字列の一部を置換するものです。例えば\n1 echo substr_replace(\u0026#39;nidema zai Nihon!\u0026#39;,\u0026#39;Shanghai\u0026#39;,11,5); 上記のコードでは、'nidema zai Nihon!'の11文字目からの5文字を'Shanghai'で置換し、「nidema zai Shanghai!」と出力されます。もちろんUnicode文字については、このマルチバイトでない関数では期待通りに扱えないです。\nこの関数のマルチバイト版は以下のように実装することができます。\n1 2 3 4 5 6 7 function mb_substr_replace($string, $replace, $offset, $length = null){ preg_match_all(\u0026#39;/./us\u0026#39;, $string, $ar); preg_match_all(\u0026#39;/./us\u0026#39;, $replace, $rar); $length = is_int($length) ? $length : mb_strlen($string); array_splice($ar[0], $offset, $length, $rar[0]); return implode($ar[0]); } 使用例 以下のコードは文字列の2文字目を「○」に変更するものです。\n1 echo mb_substr_replace(\u0026#39;灰太狼\u0026#39;, \u0026#39;○\u0026#39;, 1, 1); // 「灰○狼」を出力 mb_fgetc fgetc関数にもマルチバイト版がありません。この関数は、ファイルポインタから1文字取り出すものです。もちろん、正確には1バイトです。以下は、そのマルチバイト版（正確にはUTF-8版）を実装してみましょう。\n1 2 3 4 5 6 7 8 9 10 11 function mb_fgetc($stream){ $mask = [192, 224, 240]; $ch = fgetc($stream); if(!$ch) return false; $buf = $ch; for($i = 0; $i \u0026lt; 3; $i++){ if((ord($ch) \u0026amp; $mask[$i]) != $mask[$i]) break; $buf .= fgetc($stream); } return $buf; } この関数はUTF-8のエンコードに基づいて実装されており、文字の1バイト目とマスクをビットごとにANDを取って、1文字を読み込むために必要なバイト数を判断します。192はU＋0080〜U＋07FF（2バイト）、224はU＋0800〜U＋FFFF（3バイト）、240はU＋10000〜U＋1FFFFF（4バイト）に一致します。もし、ファイルのエンコーディングがUTF-8ではなく、例えばShift JISの場合は、他の方法を使用しなければならないです。ファイルのエンコーディングを自動的に判断するにはより複雑なアルゴリズムが必要であり、一つの関数だけでは実現できません。\n使用例 ここでは、読み込むファイルの内容が「草😂」（U+8349 U+1F602）で始まるとします。\n1 2 3 $fp = fopen($_FILES[\u0026#39;file\u0026#39;][\u0026#39;tmp_name\u0026#39;], \u0026#39;r\u0026#39;); echo mb_fgetc($fp); // ファイルポインタの1文字目「草」を読み込んで出力 echo mb_fgetc($fp); // ファイルポインタの2文字目「😂」を読み込んで出力 他にも既存のマルチバイト版がない関数は多くありますが、もし遭遇した場合はそれぞれ個別に分析してください。\n","date":"2022-12-13T00:00:00Z","image":"https://s1.ax1x.com/2023/01/13/pSKigRs.png","permalink":"https://honoka55.github.io/ja/p/php-mb-ext/","title":"PHPのマルチバイト関数へのいくつかの追加"},{"content":"C++でMariaDBデータベースに接続する簡単な方法の一つを記録しています。また、簡単な改造でMySQLへ接続することも可能です。\n環境： Dev-C++ 5.11、GCC 4.9.2、MariaDB 10.6\n設定手順：\nMariaDBがインストールされているディレクトリの中のincludeフォルダとlibフォルダを、それぞれコンパイルオプションに記載されているインクルードディレクトリとライブラリディレクトリに上書きします。 コンパイルオプションのコネクタコマンドラインに次のコマンドを追加します：-lmariadb。 libフォルダからlibmariadb.dllをソースコードのあるディレクトリにコピーします。 接続とデバッグのソースコード：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include \u0026lt;iostream\u0026gt; #include \u0026lt;mysql/mysql.h\u0026gt; using namespace std; MYSQL *link; MYSQL_RES *res; MYSQL_ROW row; int main(){ /* ターミナルのコードページをUTF-8に設定 日本語OSでのDev-C++のデフォルトエンコーディングはShift JISで変更できないため、 これによりUTF-8のデータベースが正しく表示されるようになります。 また、データベース作成時にエンコーディングをShift JISにすることで、 以下の2行を削除することができます。 */ system(\u0026#34;chcp 65001\u0026#34;); system(\u0026#34;cls\u0026#34;); /* 接続の作成 */ link = mysql_init(NULL); if(!mysql_real_connect(link, \u0026#34;localhost\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;YOUR_PASSWORD\u0026#34;/* パスワード */, \u0026#34;school\u0026#34;/* データベースの名前 */, 0, NULL, 0)) fprintf(stderr, \u0026#34;%s\\n\u0026#34;, mysql_error(link)); /* テーブル一覧の出力 */ if(mysql_query(link, \u0026#34;SHOW TABLES;\u0026#34;)) fprintf(stderr, \u0026#34;%s\\n\u0026#34;, mysql_error(link)); res = mysql_use_result(link); cout\u0026lt;\u0026lt;\u0026#34;MySQL Tables in school database:\u0026#34;\u0026lt;\u0026lt;endl; while((row = mysql_fetch_row(res)) != NULL) cout\u0026lt;\u0026lt;row[0]\u0026lt;\u0026lt;endl; /* SELECT文の実行と出力 */ char sql[] = \u0026#34;SELECT sno, sname FROM student WHERE sno IN (SELECT sno FROM sc GROUP BY sno HAVING COUNT(*) \u0026gt;= 2);\u0026#34;; mysql_query(link, sql); res = mysql_store_result(link); for(int i = 0; i \u0026lt; mysql_num_rows(res); i++){ row = mysql_fetch_row(res); cout\u0026lt;\u0026lt;row[0]\u0026lt;\u0026lt;\u0026#39;\\t\u0026#39;\u0026lt;\u0026lt;row[1]\u0026lt;\u0026lt;endl; } /* メモリの解放と接続の終了 */ mysql_free_result(res); mysql_close(link); return 0; } 実行：\n関数の詳細な説明については、ご自身で公式ドキュメントをご参照ください。\n","date":"2022-12-11T00:00:00Z","image":"https://s1.ax1x.com/2023/01/12/pSuG5DO.png","permalink":"https://honoka55.github.io/ja/p/cpp-mariadb-link/","title":"C++からMariaDBへの接続"},{"content":"江永女書で書かれた元素の周期表を作成しましたので、以下にシェアします。\n女書フォントは私のIongsew Tcyntang、SIL Open Source Font License 1.1のもとで公開されています。欧文フォントはGilbert、CC BY-SA 4.0のもとで公開されているものです。\n","date":"2022-10-19T00:00:00Z","image":"https://s1.ax1x.com/2023/01/12/pSu86pt.jpg","permalink":"https://honoka55.github.io/ja/p/nyushu-zhouqibiao/","title":"江永女書で書かれた周期表の試作"}]